//–ó–ê–î–ê–ß–ê 1
// const arr = ['a', 'b', 'c']
// console.log(arr);

//–ó–ê–î–ê–ß–ê 2
//–≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ, –≤—Ç–æ—Ä–æ–≥–æ –∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// console.log(arr[0], arr[1], arr[2]);

//–ó–ê–î–ê–ß–ê 3

// const arr = ['a+b', 'c+d']
// console.log(arr[0] + ',' + arr[1]);

//–ó–ê–î–ê–ß–ê 4

// const arr = [2 ,5, 3, 9]
// const num1 = arr[0] * arr[1];
// const num2 = arr[2] * arr[3];
// const result = num1 + num2;
// console.log(result);

//–ó–ê–î–ê–ß–ê 5
// const max = 20;
// const min = 3;
// const result = Math.random() * ((max - min) + min);

// console.log(result.toFixed());

//–ó–ê–î–ê–ß–ê 6
// –ø–µ—Ä–µ–≤–æ–¥ —á–∏—Å–µ–ª–∞ —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å

// console.log(-Math.abs(4));

//–ó–ê–î–ê–ß–ê 7
//–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç n –¥–æ 1, –≥–¥–µ n>0.

// const reverseSeq = n => {
//     let answer = [];          //intialize an array

//     for (let i=n; i > 0; i -= 1 ){  //loop down from n to 1
//       answer.push(i);         //push each i to the answer array
//     }

//     return answer; }           //return answer;

//     console.log(reverseSeq(7));
//===================================================================
//–ó–ê–î–ê–ß–ê
//–ó–ê–î–ê–ß–ê
//–ó–ê–î–ê–ß–ê
//–ó–ê–î–ê–ß–ê
//–ó–ê–î–ê–ß–ê
//–ó–ê–î–ê–ß–ê
//–ó–ê–î–ê–ß–ê
//–ó–ê–î–ê–ß–ê
//–ó–ê–î–ê–ß–ê

// const num = {
//     names: '–ü—Ä–∏–≤–µ—Ç',
//     age: 20,
//     msg: '–ú–ò–†',
// }
// console.log(num);

// num.names = '–ü–æ–∫–∞';
// console.log(num);

//–ó–ê–î–ê–ß–ê –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞

// const n = "Your order is too large, not enough goods in stock!";

// const w = 456923759;

// let q = String(n).split(' ').join(' ').toLowerCase();

// let r  = parseInt(String(w).split('').sort().reverse().join(''));

// console.log(q);
// console.log(r);
//===============================================================

// const num = 9119;

// function squareDigits(num){
//     const string = num.toString();
//     const results = [];
//     for ( i = 0; i < string.length; i++){
//         results[i] = string[i] * string[i];
//     }
//     console.log(Number(results.join(''))) ;
// };

//===============================================================
// const fruits = ["apple", "plum", "pear", "orange"];
// console.log(fruits[2]);
//===============================================================

// const clients = [12, 32, 6];
// let sum = 0 ;
// let div = clients;
// for (i = 0; i <= clients.length; i +=1) {
//     sum += clients[i];

// }
// console.log(clients[0]);
// console.log(sum);
// console.log(div);
//  console.log(Number(sum));
//===============================================================
// const clients = ["Mango", "Ajax", "Poly"];

// for (const client of clients) {
//     console.log('el:',client.toLowerCase());
// }

//===============================================================

// const number = [1, 3, 14, 20, 4, 7, 25, 6, 30];
// const numbers = [1, 3, 14, 18, 4, 7, 29, 6, 34];
// const threshold = 15;

// // –î–ª—è —á–∏—Å–µ–ª –º–µ–Ω—å—à–µ —á–µ–º –ø–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç continue, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è
// // –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é.
// for (let num = 0; num < numbers.length; num += 1) {
//       if (numbers[num] < threshold) {
//               continue;
//           }
//           console.log(`–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ —á–µ–º ${threshold}: ${numbers[num]}`);
//         }
//===============================================================

// const clients = ["Mango", "Ajax", "Max", 'Sem'];
// const clientNameToFind = "Poly" && "Max" ;
// let message;

// for (const client of clients) {
//   // –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å
//   // –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞. –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ message —Å–æ–æ–±—â–µ–Ω–∏–µ
//   // –æ–± —É—Å–ø–µ—Ö–µ –∏ –¥–µ–ª–∞–µ–º break —á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ
//   if (client === clientNameToFind) {
//     message = "–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!";
//     break;
//   }

//   // –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Ç–æ –∑–∞–ø–∏—à–µ–º –≤ message —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–º–µ–Ω–∏
//   message = "–ö–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!";
// }

// console.log(message); // "–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"

//===============================================================
//===============================================================

// let a = 3;

// let b = a;

// a = 5;
// b = 7;

// console.log(a);
// console.log(b);

// let w = ['Max']

// let r = w;

// w.push("WERc") + w.push('HTRERG');

// console.log(r);

//===============================================================

//–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏ –¥–æ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞.
//–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ number —Ä–∞–≤–Ω–æ 3, —Ç–æ —Å—É–º–º–∞ —ç—Ç–æ 1 + 2 + 3, —Ç–æ –µ—Å—Ç—å 6.

// const target = 3;
// let sum = 0;

// for (let i = 0; i <= target; i += 1) {
//     sum +=i
//     console.log(i);
// }

// console.log(sum);

//===============================================================

//–¶–∏–∫–ª for –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –º–∞—Å—Å–∏–≤—É,
//—Ç–æ –µ—Å—Ç—å ¬´–ø–µ—Ä–µ–±—Ä–∞—Ç—å¬ª –µ–≥–æ –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ.

// const fruits = ['apple', 'plum', 'pear', 'orange'];

// for (let i = 0; i < fruits.length ; i += 1) {
//     const fruit = fruits[i];
//     console.log(fruit);
// }
//===============================================================

//–ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.–û–±—â–∞—è —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
//–¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π S, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
// const clients = [12, 12, 6, 6];
// let S = 0;

// for (let i = 0; i < clients.length; i += 1) {

//     S += clients[i];

//     console.log(S);
// }

// function sum (clients) {
//     let s = 0;
//     for (let i = 0; i < clients.length; i += 1) {

//         // s += clients[i];

//         console.log(i);

//     }
//    console.log([i]);
// }
//============================================================
//============================================================

//–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ.

// const str = "The quick brown fox jumped over the lazy dog";

// const strSplit = str.split(' ');
// const sortSrt = strSplit.sort((strA, strB) => {
//     return strB.length - strA.length;
// })
// console.log(sortSrt[0]);

//============================================================

// const num = 30;
// console.log(num * (num + 1) / 2);

// function squareSum(numbers){
//     let sum = 0;
//     for ( let number of numbers ){
//      sum +=  number * number;
//     }
//    console.log(sum);
//    }

//    console.log(squareSum([0, 3, 4, 5]));

// function correct(string) {
// 	const arr = string
// 		.split("")
// 		.map(elem => {
// 			if (Number(elem) === 0) {
// 				return (elem = "O");
// 			} else if (Number(elem) === 1) {
// 				return (elem = "I");
// 			} else if (Number(elem) === 5) {
// 				return (elem = "S");
// 			}
// 			return elem;
// 		})
// 		.join("");

// 	// console.log("üöÄ  arr", arr);
// 	return arr;
// }
// function corrects(string) {
// 	const arr = string.split("").map(elem => {
// 		if (Number(elem) === 0) {
// 			return (elem = "O");
// 		} else if (Number(elem) === 1) {
// 			return (elem = "I");
// 		} else if (Number(elem) === 5) {
// 			return (elem = "S");
// 		} else if (Number(elem) === ) {
// 			return (elem = "S");
// 		}
// 		return elem;
// 	});
// 	// .join("");

// 	console.log("üöÄ  arr", arr);
// 	return arr;
// }
// function correct(string) {
// 	return string.replace(/0/g, "O").replace(/5/g, "S").replace(/1/g, "I");
// }
// function correct(string) {
// 	const str = [...string].map(a => ({ 0: "O", 5: "S", 1: "I" }[a] || a)).join("");

// 	console.log("üöÄ  str", str);
// }

// correct("DUBL1N");
// correct("51NGAP0RE");
// correct("D0ZCTGRRHLCM5AKCKUPZXQQQWYCVP");
// correct("IF-RUDYARDOKIPLING");

// console.log(correct("IF-RUDYARD KIPLING"));
// console.log(correct("L0ND0N"));

// const salary = 1200;
// const percent = 100 - 30;
// const countSalary = Math.floor((salary * 100) / percent);
// console.log("üöÄ  countSalary", countSalary);

// const salarys = 2000;

// const percents = 10;
// const sals = salarys * (percents / 100);

// const salesw = (sals + salarys) * (percents / 100);

// const saless = salesw * (percents / 100);

// const totals = Math.ceil(salarys + sals + saless);

// console.log("üöÄ  totalBudgetTester:", totals);
// console.log("üöÄ  totalBudgetTeam:", totals + total);

const teams = [
	{ name: "Masha", specialization: "Progger" },
	{ name: "Vasya", specialization: "Tester" },
	{ name: "Taras", specialization: "Tester" },
];

const salaries = {
	Progger: { salary: 1000, tax: "15%" },
	Tester: { salary: 1000, tax: "10%" },
};
const calculateTeamFinanceReport = (salaries, teams) => {
	const { Progger, Tester } = salaries;
	const newArrayProgger = [];
	const newArrayTester = [];

	for (const { specialization } of teams) {
		if (specialization === "Progger") {
			newArrayProgger.push(specialization);
		} else if (specialization === "Tester") {
			newArrayTester.push(specialization);
		}
	}
	const proggerAmount = newArrayProgger.length * Progger.salary;
	const testerAmount = newArrayTester.length * Tester.salary;
	const objectSalaryAndTax = [
		{ salary: proggerAmount, tax: Progger.tax },
		{ salary: testerAmount, tax: Tester.tax },
	];

	const getAllSalary = countSalaryForEach(objectSalaryAndTax);

	const totalAmount = getAllSalary.reduce((prev, elem) => prev + elem, 0);
	const objectReady = {
		totalBudgetTeam: totalAmount,
		totalBudgetProgger: getAllSalary[0],
		totalBudgetTester: getAllSalary[1],
	};
	return objectReady;
};

const countSalaryForEach = objectSalaryTax => {
	return objectSalaryTax.map(obj => {
		const salary = obj.salary;
		const percent = 100 - obj.tax.replace(/[\D]+/g, "");
		return Math.floor((salary * 100) / percent);
	});
};

const financeReport1 = calculateTeamFinanceReport(salaries, teams);
console.log(JSON.stringify(financeReport1));
